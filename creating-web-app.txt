Example 1: Most basic request
1. Create maven jar project (you can optionally use the webjar archetype)
3. Required - Add webjar-bridge dependency
2. Optional - Add compiler plugin and set source/target to 1.7
4. Optional - Add Junit dependency (test scope)
5. Create class to bootstrap the web app

        @Path("/sample")
	public class SampleWebApp { 
    
	    @GET
            @PermitAll
	    public String helloWorld(){
	        return "Hello World!";
	    }
	}

6. Add main method for entry point and execute

    public static void main(String[] args){
        AbstractRunner.init().create(args, SampleWebApp.class);
    }

7. Open browser and navigate to "http://localhost:8082/ws/sample"

Notes:

1. SampleWebApp is a plain-old jax-rs compliant resource class
2. AbstractRunner.init(...) is used to create an instance of the AbstractRunner class, with optional Spring configuration
2. AbstractRunner.create(...) is an overloaded method for registering jax-rs resources with the http server
3. The default application context is '/ws' but this is configurable in 'app-config.properties' via 'app.paths.entry'
4. @PermitAll is required on any resource method that allows non-authenticated access

Example 2: Changing context root
1. Add 'app-config.properties' in the application root folder and override 'app.paths.entry' value with '/foo'
2. Restart the server
3. Open browser and navigate to "http://localhost:8082/foo/sample"

Example 3: Returning json
1. Create handler method

    @GET
    @Path("json")
    @Produces(MediaType.APPLICATION_JSON)
    @PermitAll
    public Response helloJson(){
        LOG.info("invoked 'helloJson' method");
        Map<String, Object> data = new HashMap<>();
        data.put("message", "Hello World");
        return Response.ok(data).build();
    }

2. Restart the server
3. Open browser and navigate to "http://localhost:8082/foo/sample/json"

Notes:

1. @Produces informs application to encode response as JSON
2. Using Response as return values allows you to customize the response for the client to understand the intent

Example 4. Returning XML
1. Create a model class for the XML
    
    @XmlRootElement
    public class Item {

        private Long id;
        private String name;

        public Item() {
            super();
        }

        public Item(Long id, String name) {
            this.id = id;
            this.name = name;
        }

        //setters and getters
    }

2. Create handler method

    Path("xml")
    @Produces(MediaType.APPLICATION_XML)
    @PermitAll
    public Response helloXml(){
        LOG.info("invoked 'helloXml' method");
        return Response.ok(new Item(1l, "Hello XML")).build();
    }

2. Restart the server
3. Open browser and navigate to "http://localhost:8082/foo/sample/xml"

Notes:

1. @XmlRootElement is required only for generating the XML
2. @Produces informs application to encode response as XML

Example 5. Using a Spring service

1. Create a service class
    
    @Service
    public class SampleService {

        @Value("${service.message}")
        private String message;

        public String getMessage() {
            return message;
        }

        public void setMessage(String message) {
            this.message = message;
        }
    }

2. Create a spring configuration (using annotations in this example)

    @Configuration
    @PropertySource({"classpath:sample-service.properties"})
    @ComponentScan(basePackages = {"works.hop.webjar.sample.service"}
    public class SampleAppConfig {}

3. Create a properties file and place in the classpath
    
    /src/main/resources/sample-service.properties
    service.message=Hello World

4. Inject the 'SampleService and add a 'helloService()' endpoint

    @Inject
    private SampleService service;
    
    ....

    @GET
    @Path("service")
    @Produces(MediaType.APPLICATION_JSON)
    @PermitAll
    public Response helloService(){
        LOG.info("invoked 'helloService' method");
        String message = service.getMessage();
        return Response.ok(new Item(1l, message)).build();
    }

5. Add a system property to link your DI context to the existing application

    public static void main(String[] args){
        //add system property -Dcontext.lookup=works.hop.webjar.sample.config.SampleAppConfig;
        System.setProperty("context.lookup", "works.hop.webjar.sample.config.SampleAppConfig");
        AbstractRunner.init().create(args, SampleWebApp.class);
    }

6. Restart the server

7. Open browser and navigate to "http://localhost:8082/foo/sample/service"